import ApiConfigInterface from './faces/lib/api';
import CryptoInterface from './faces/utils/crypto';
import Api from './lib/api';
import { Network } from './lib/network';
import Wallets from './lib/wallets';
import Ar from './utils/ar';
import Chunks from './lib/chunks';
import Transactions from './lib/transactions';
import ArCache from './utils/arCache';
import { JWKInterface } from './faces/lib/wallet';
import { CreateTransactionInterface } from './faces/blockweave';
import Transaction from './lib/transaction';
import * as SmartWeaveSdk from 'redstone-smartweave';
import * as blockweaveUtils from './utils/buffer';
import Blocks from './lib/blocks';
export default class Blockweave {
    api: Api;
    wallets: Wallets;
    transactions: Transactions;
    blocks: Blocks;
    network: Network;
    ar: Ar;
    chunks: Chunks;
    cache: ArCache;
    utils: typeof blockweaveUtils;
    /**
     * @deprecated Use the static Blockweave.crypto instead.
     */
    crypto: CryptoInterface;
    static smartWeave: typeof SmartWeaveSdk;
    static crypto: CryptoInterface;
    constructor(apiConfig?: ApiConfigInterface, trustedHosts?: string[]);
    get config(): ApiConfigInterface;
    /**
     * @deprecated Use arkb.config instead.
     */
    getConfig(): {
        api: ApiConfigInterface;
    };
    createTransaction(attributes: Partial<CreateTransactionInterface>, jwk?: JWKInterface | 'use_wallet'): Promise<Transaction>;
    /**
     * Do an ArQL request.
     * @deprecated Use https://npmjs.org/@textury/ardb instead.
     * @param  {object} query
     * @returns Promise
     */
    arql(query: object): Promise<string[]>;
}
declare global {
    interface Window {
        Blockweave: typeof Blockweave;
    }
}
