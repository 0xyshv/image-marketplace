"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
class Api {
    trustedHosts = ['http://localhost:1984', 'https://arweave.net', 'https://amp-gw.online'];
    _config;
    get config() {
        return this._config;
    }
    /**
     * @deprecated Use `api.config` instead
     * @returns {ApiConfigInterface} - The API configuration.
     */
    getConfig() {
        return this._config;
    }
    constructor(config = {}, trustedHosts) {
        this._config = this.mergeDefaults(config);
        this.trustedHosts = trustedHosts || this.trustedHosts;
    }
    /**
     * Do a GET request to the selected gateway
     * @param  {string} endpoint - API endpoint
     * @param  {AxiosRequestConfig} config? - Axios configuration
     * @returns {AxiosResponse} - Promise which resolves on the axios response
     */
    async get(endpoint, config) {
        return this.doRequest(endpoint, 'GET', config);
    }
    /**
     * Do a POST request to the selected gateway
     * @param  {string} endpoint - API endpoint
     * @param  {Buffer|string|object} body - Body content to post
     * @param  {AxiosRequestConfig} config? - Axios configuration
     * @returns {AxiosResponse} - Promise which resolves on the axios response
     */
    async post(endpoint, body, config) {
        return this.doRequest(endpoint, 'POST', config, body);
    }
    /**
     * Get an AxiosInstance with the base configuration setup to fire off
     * a request to the network.
     * @returns {AxiosInstance}
     */
    request() {
        const instance = axios_1.default.create({
            baseURL: `${this._config.url}`,
            timeout: this._config.timeout,
            maxContentLength: 1024 * 1024 * 512,
        });
        if (this._config.logging) {
            instance.interceptors.request.use((request) => {
                this._config.logger.log(`Requesting: ${request.baseURL}/${request.url}`);
                return request;
            });
            instance.interceptors.response.use((response) => {
                this._config.logger.log(`Response:   ${response.config.url} - ${response.status}`);
                return response;
            });
        }
        return instance;
    }
    /**
     *
     * @param  {string} endpoint - API endpoint
     * @param  {'get'|'post'} type - GET | POST
     * @param  {AxiosRequestConfig} config - Axios config
     * @param  {Buffer|string|object} body?
     * @returns {AxiosResponse} - Promise which resolves on the axios response
     * @private
     */
    async doRequest(endpoint, type, config, body) {
        const previous = this.config;
        const tmpTrusted = [this._config.url, ...this.trustedHosts];
        const total = tmpTrusted.length;
        let current = 0;
        const run = async () => {
            try {
                this._config = this.mergeDefaults({
                    url: tmpTrusted.splice(0, 1)[0],
                    timeout: this.config.timeout,
                    logger: this.config.logger,
                    logging: this.config.logging,
                });
                endpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;
                if (type === 'GET') {
                    return await this.request().get(endpoint, config);
                }
                return await this.request().post(endpoint, body, config);
            }
            catch (error) {
                current++;
                if (current < total && previous.host !== 'localhost') {
                    return run();
                }
                this._config = previous;
                if (error.response && error.response.status) {
                    return error.response;
                }
                throw error;
            }
        };
        return run();
    }
    /**
     * Merge the default configuration with the user provided configuration
     * @param  {ApiConfigInterface} config
     * @returns {ApiConfigInterface}
     * @private
     */
    mergeDefaults(config) {
        if (config.url) {
            const match = config.url.match(/(https?):\/\/([\w\.]+):?(\d+)?/);
            if (match) {
                config.protocol = match[1];
                config.host = match[2];
                config.port = +match[3] || (config.protocol === 'https' ? 443 : 80);
                config.url = config.url.replace(/:80$/gm, '').replace(/:443$/gm, '');
            }
            else {
                config.url = 'https://arweave.net';
                return this.mergeDefaults(config);
            }
        }
        else if (config.host && config.protocol) {
            config.port = config.port || (config.protocol === 'https' ? 443 : 80);
            const port = config.port === 80 || config.port === 443 ? '' : `:${config.port}`;
            config.url = `${config.protocol}://${config.host}${port}`;
        }
        else if (config.host && config.port) {
            config.url = `${config.port === 443 ? 'https' : 'http'}://${config.host}:${config.port}`;
            return this.mergeDefaults(config);
        }
        else {
            config.url = 'https://arweave.net';
            return this.mergeDefaults(config);
        }
        config.timeout = config.timeout || 20000;
        config.logging = config.logging ? true : false;
        config.logger = config.logger || console;
        return config;
    }
}
exports.default = Api;
