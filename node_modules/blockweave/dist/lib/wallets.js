"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("../utils/buffer");
const B64js = __importStar(require("../utils/b64"));
class Wallets {
    api;
    crypto;
    cache;
    constructor(api, crypto, cache) {
        this.api = api;
        this.api = api;
        this.crypto = crypto;
        this.cache = cache;
    }
    /**
     * Get the wallet balance for a given wallet address.
     * @param  {string} address - Wallet address
     * @returns {Promise<string>} - Promise which resolves on a winston string balance.
     */
    async getBalance(address) {
        let data = this.cache && (await this.cache.get(`balance-${address}`));
        if (!data) {
            const res = await this.api.get(`wallet/${address}/balance`, {
                transformResponse: (d) => d,
            });
            data = res.data;
            this.cache.set(`balance-${address}`, data, 2 * 60 * 1000);
        }
        return data;
    }
    /**
     * Get the last transaction ID for a given wallet address.
     * @param  {string} address - Wallet address
     * @returns {Promise<string>} - Promise which resolves on a transaction id as string.
     */
    async getLastTransactionId(address) {
        let data = this.cache && (await this.cache.get(`lastTxId-${address}`));
        if (!data) {
            const res = await this.api.get(`wallet/${address}/last_tx`);
            data = res.data;
            this.cache.set(`lastTxId-${address}`, data, 2 * 60 * 1000);
        }
        return data;
    }
    /**
     * Generate a new Blockweave wallet JSON object (JWK).
     * @returns Promise which resolves in the JWK.
     */
    async generate() {
        return this.crypto.generateJWK();
    }
    async jwkToAddress(jwk) {
        if (!jwk || jwk === 'use_wallet') {
            return this.getAddress();
        }
        return this.getAddress(jwk);
    }
    async getAddress(jwk) {
        if (!jwk || jwk === 'use_wallet') {
            if (typeof window === 'undefined') {
                throw new Error('JWK must be provided.');
            }
            try {
                // @ts-ignore
                await window.arweaveWallet.connect(['ACCESS_ADDRESS']);
            }
            catch (e) {
                // Permission already granted.
            }
            try {
                // @ts-ignore
                const address = window.arweaveWallet.getActiveAddress();
                return address;
            }
            catch (e) {
                throw new Error('JWK must be provided.');
            }
        }
        return this.ownerToAddress(jwk.n);
    }
    async ownerToAddress(owner) {
        let res = this.cache && (await this.cache.get(`ownerToAddress-${owner}`));
        if (!res) {
            res = (0, buffer_1.b64UrlEncode)((0, buffer_1.bufferTob64)(await this.crypto.hash(new Uint8Array(B64js.toByteArray((0, buffer_1.b64UrlDecode)(owner))))));
            if (this.cache) {
                this.cache.set(`ownerToAddress-${owner}`, res);
            }
        }
        return res;
    }
}
exports.default = Wallets;
