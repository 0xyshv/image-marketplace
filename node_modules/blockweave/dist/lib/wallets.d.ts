import { JWKInterface } from '../faces/lib/wallet';
import CryptoInterface from '../faces/utils/crypto';
import Api from './api';
import { ArCacheInterface } from '../faces/utils/arCache';
export default class Wallets {
    private api;
    private crypto;
    private cache;
    constructor(api: Api, crypto: CryptoInterface, cache?: ArCacheInterface);
    /**
     * Get the wallet balance for a given wallet address.
     * @param  {string} address - Wallet address
     * @returns {Promise<string>} - Promise which resolves on a winston string balance.
     */
    getBalance(address: string): Promise<string>;
    /**
     * Get the last transaction ID for a given wallet address.
     * @param  {string} address - Wallet address
     * @returns {Promise<string>} - Promise which resolves on a transaction id as string.
     */
    getLastTransactionId(address: string): Promise<string>;
    /**
     * Generate a new Blockweave wallet JSON object (JWK).
     * @returns Promise which resolves in the JWK.
     */
    generate(): Promise<JWKInterface>;
    jwkToAddress(jwk?: JWKInterface | 'use_wallet'): Promise<string>;
    getAddress(jwk?: JWKInterface | 'use_wallet'): Promise<string>;
    ownerToAddress(owner: string): Promise<string>;
}
