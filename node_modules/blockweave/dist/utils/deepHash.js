"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepHashChunks = void 0;
const blockweave_1 = __importDefault(require("../blockweave"));
const buffer_1 = require("./buffer");
const deepHash = async (data) => {
    let tag;
    if (Array.isArray(data)) {
        tag = (0, buffer_1.concatBuffers)([(0, buffer_1.stringToBuffer)('list'), (0, buffer_1.stringToBuffer)(data.length.toString())]);
        return await (0, exports.deepHashChunks)(data, await blockweave_1.default.crypto.hash(tag, 'SHA-384'));
    }
    tag = (0, buffer_1.concatBuffers)([(0, buffer_1.stringToBuffer)('blob'), (0, buffer_1.stringToBuffer)(data.byteLength.toString())]);
    const taggedHash = (0, buffer_1.concatBuffers)([
        await blockweave_1.default.crypto.hash(tag, 'SHA-384'),
        await blockweave_1.default.crypto.hash(data, 'SHA-384'),
    ]);
    return await blockweave_1.default.crypto.hash(taggedHash, 'SHA-384');
};
const deepHashChunks = async (chunks, acc) => {
    if (chunks.length < 1) {
        return acc;
    }
    const hashPair = (0, buffer_1.concatBuffers)([acc, await deepHash(chunks[0])]);
    const newAcc = await blockweave_1.default.crypto.hash(hashPair, 'SHA-384');
    return (0, exports.deepHashChunks)(chunks.slice(1), newAcc);
};
exports.deepHashChunks = deepHashChunks;
exports.default = deepHash;
