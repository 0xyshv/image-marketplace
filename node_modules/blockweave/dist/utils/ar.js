"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_js_1 = require("bignumber.js");
/**
 * Utility to convert AR to Winston and vice versa.
 */
class Ar {
    /**
     * Convert Winston to AR.
     * @param  {string} winstonString
     * @param  {boolean} formatted - Default is false
     * @param  {number} decimals - Default is 12
     * @param  {boolean} trim - Default is true
     * @returns {string} - The AR as string
     */
    winstonToAr(winstonString, { formatted = false, decimals = 12, trim = true } = {}) {
        const n = this.stringToBigNum(winstonString, decimals).shiftedBy(-12);
        return formatted ? n.toFormat(decimals) : n.toFixed(decimals);
    }
    arToWinston(arString, { formatted = false } = {}) {
        const n = this.stringToBigNum(arString).shiftedBy(12);
        return formatted ? n.toFormat() : n.toFixed(0);
    }
    compare(winstonStringA, winstonStringB) {
        const a = this.stringToBigNum(winstonStringA);
        const b = this.stringToBigNum(winstonStringB);
        return a.comparedTo(b);
    }
    isEqual(winstonStringA, winstonStringB) {
        return this.compare(winstonStringA, winstonStringB) === 0;
    }
    isLessThan(winstonStringA, winstonStringB) {
        const a = this.stringToBigNum(winstonStringA);
        const b = this.stringToBigNum(winstonStringB);
        return a.isLessThan(b);
    }
    isGreaterThan(winstonStringA, winstonStringB) {
        const a = this.stringToBigNum(winstonStringA);
        const b = this.stringToBigNum(winstonStringB);
        return a.isGreaterThan(b);
    }
    add(winstonStringA, winstonStringB) {
        const a = this.stringToBigNum(winstonStringA);
        const b = this.stringToBigNum(winstonStringB);
        return a.plus(winstonStringB).toFixed(0);
    }
    sub(winstonStringA, winstonStringB) {
        const a = this.stringToBigNum(winstonStringA);
        const b = this.stringToBigNum(winstonStringB);
        return a.minus(winstonStringB).toFixed(0);
    }
    stringToBigNum(stringValue, decimalPlaces = 12) {
        const instance = bignumber_js_1.BigNumber.clone({ DECIMAL_PLACES: decimalPlaces });
        return new instance(stringValue);
    }
}
exports.default = Ar;
