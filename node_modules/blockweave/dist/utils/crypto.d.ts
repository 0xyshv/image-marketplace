/// <reference types="node" />
import { JWKInterface } from '../faces/lib/wallet';
import CryptoInterface, { SignatureOptions } from '../faces/utils/crypto';
export default class CryptoDriver implements CryptoInterface {
    readonly keyLength = 4096;
    readonly publicExponent: Uint8Array;
    readonly hashAlgorithm = "SHA-256";
    driver: SubtleCrypto;
    constructor();
    generateJWK(): Promise<JWKInterface>;
    sign(jwk: JWKInterface, data: Uint8Array, signOpts?: SignatureOptions): Promise<Uint8Array>;
    hash(data: Uint8Array, algorithm?: string): Promise<Uint8Array>;
    verify(publicModulus: string, data: Uint8Array, signature: Uint8Array): Promise<boolean>;
    encrypt(data: Buffer, key: string | Buffer, salt?: string): Promise<Uint8Array>;
    decrypt(encrypted: Buffer, key: string | Buffer, salt?: string): Promise<Uint8Array>;
    private jwkToCryptoKey;
    private jwkToPublicCryptoKey;
}
