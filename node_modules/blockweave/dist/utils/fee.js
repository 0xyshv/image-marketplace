"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const redstone_smartweave_1 = require("redstone-smartweave");
async function selectWeightedHolder(blockweave) {
    let res;
    try {
        res = await getState(blockweave);
    }
    catch { }
    if (!res) {
        return;
    }
    const { balances, vault } = res;
    let totalTokens = 0;
    for (const addy of Object.keys(balances)) {
        totalTokens += balances[addy];
    }
    for (const addy of Object.keys(vault)) {
        if (!vault[addy].length)
            continue;
        const vaultBalance = vault[addy].map((a) => a.balance).reduce((a, b) => a + b, 0);
        totalTokens += vaultBalance;
        if (addy in balances) {
            balances[addy] += vaultBalance;
        }
        else {
            balances[addy] = vaultBalance;
        }
    }
    const weighted = {};
    for (const addy of Object.keys(balances)) {
        weighted[addy] = balances[addy] / totalTokens;
    }
    let sum = 0;
    const r = Math.random();
    for (const addy of Object.keys(weighted)) {
        sum += weighted[addy];
        if (r <= sum && weighted[addy] > 0) {
            return addy;
        }
    }
    return;
}
exports.default = selectWeightedHolder;
async function getState(blockweave) {
    try {
        const cxyzContractTxId = 'cEQLlWFkoeFuO7dIsdFbMhsGPvkmRI9cuBxv0mdn0xU';
        redstone_smartweave_1.LoggerFactory.INST.logLevel('error');
        // @ts-ignore
        const smartweave = redstone_smartweave_1.SmartWeaveWebFactory.memCached(blockweave);
        // connecting to a given contract
        const cxyzContract = smartweave.contract(cxyzContractTxId);
        const { state } = await cxyzContract.readState();
        return state;
    }
    catch {
        return;
    }
}
