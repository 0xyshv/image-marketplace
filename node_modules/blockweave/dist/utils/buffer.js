"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.b64UrlDecode = exports.b64UrlEncode = exports.bufferTob64Url = exports.bufferTob64 = exports.b64UrlToBuffer = exports.stringToB64Url = exports.stringToBuffer = exports.bufferToString = exports.b64UrlToString = exports.concatBuffers = void 0;
const b64_1 = require("./b64");
const util_1 = __importDefault(require("util"));
function concatBuffers(buffers) {
    let totalLength = 0;
    for (const buffer of buffers) {
        totalLength += buffer.byteLength;
    }
    const temp = new Uint8Array(totalLength);
    let offset = 0;
    temp.set(new Uint8Array(buffers[0]), offset);
    offset += buffers[0].byteLength;
    for (let i = 1; i < buffers.length; i++) {
        temp.set(new Uint8Array(buffers[i]), offset);
        offset += buffers[i].byteLength;
    }
    return temp;
}
exports.concatBuffers = concatBuffers;
function b64UrlToString(b64UrlString) {
    const buffer = b64UrlToBuffer(b64UrlString);
    // TextEncoder will be available in browsers, but not in node
    if (typeof TextDecoder === 'undefined') {
        return new util_1.default.TextDecoder('utf-8', { fatal: true }).decode(buffer);
    }
    return new TextDecoder('utf-8', { fatal: true }).decode(buffer);
}
exports.b64UrlToString = b64UrlToString;
function bufferToString(buffer) {
    // TextEncoder will be available in browsers, but not in node
    if (typeof TextDecoder === 'undefined') {
        return new util_1.default.TextDecoder('utf-8', { fatal: true }).decode(buffer);
    }
    return new TextDecoder('utf-8', { fatal: true }).decode(buffer);
}
exports.bufferToString = bufferToString;
function stringToBuffer(str) {
    // TextEncoder will be available in browsers, but not in node
    if (typeof TextEncoder === 'undefined') {
        return new util_1.default.TextEncoder().encode(str);
    }
    return new TextEncoder().encode(str);
}
exports.stringToBuffer = stringToBuffer;
function stringToB64Url(str) {
    return bufferTob64Url(stringToBuffer(str));
}
exports.stringToB64Url = stringToB64Url;
function b64UrlToBuffer(b64UrlString) {
    return new Uint8Array((0, b64_1.toByteArray)(b64UrlDecode(b64UrlString)));
}
exports.b64UrlToBuffer = b64UrlToBuffer;
function bufferTob64(buffer) {
    return (0, b64_1.fromByteArray)(new Uint8Array(buffer));
}
exports.bufferTob64 = bufferTob64;
function bufferTob64Url(buffer) {
    return b64UrlEncode(bufferTob64(buffer));
}
exports.bufferTob64Url = bufferTob64Url;
function b64UrlEncode(b64UrlString) {
    return b64UrlString.replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
}
exports.b64UrlEncode = b64UrlEncode;
function b64UrlDecode(b64UrlString) {
    b64UrlString = b64UrlString.replace(/\-/g, '+').replace(/\_/g, '/');
    let padding;
    b64UrlString.length % 4 === 0 ? (padding = 0) : (padding = 4 - (b64UrlString.length % 4));
    return b64UrlString.concat('='.repeat(padding));
}
exports.b64UrlDecode = b64UrlDecode;
