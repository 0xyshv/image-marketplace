"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const api_1 = __importDefault(require("./lib/api"));
const network_1 = require("./lib/network");
const wallets_1 = __importDefault(require("./lib/wallets"));
const crypto_1 = __importDefault(require("./utils/crypto"));
const ar_1 = __importDefault(require("./utils/ar"));
const chunks_1 = __importDefault(require("./lib/chunks"));
const transactions_1 = __importDefault(require("./lib/transactions"));
const arCache_1 = __importDefault(require("./utils/arCache"));
const transaction_1 = __importDefault(require("./lib/transaction"));
const SmartWeaveSdk = __importStar(require("redstone-smartweave"));
const blockweaveUtils = __importStar(require("./utils/buffer"));
const logging_1 = __importDefault(require("./utils/logging"));
const blocks_1 = __importDefault(require("./lib/blocks"));
class Blockweave {
    api;
    wallets;
    transactions;
    blocks;
    network;
    ar;
    chunks;
    cache;
    utils = blockweaveUtils;
    /**
     * @deprecated Use the static Blockweave.crypto instead.
     */
    crypto = new crypto_1.default();
    static smartWeave = SmartWeaveSdk;
    static crypto = new crypto_1.default();
    constructor(apiConfig = {}, trustedHosts) {
        this.cache = new arCache_1.default();
        if (apiConfig.logging && !apiConfig.logger) {
            apiConfig.logger = new logging_1.default(apiConfig);
        }
        this.api = new api_1.default(apiConfig, trustedHosts);
        this.network = new network_1.Network(this.api, this.cache);
        this.wallets = new wallets_1.default(this.api, Blockweave.crypto, this.cache);
        this.ar = new ar_1.default();
        this.chunks = new chunks_1.default(this.api);
        this.transactions = new transactions_1.default(this, this.chunks, this.cache);
        this.blocks = new blocks_1.default(this.api, this.network, this.cache);
    }
    get config() {
        return this.api.config;
    }
    /**
     * @deprecated Use arkb.config instead.
     */
    getConfig() {
        return {
            api: this.api.config,
        };
    }
    async createTransaction(attributes, jwk) {
        return transaction_1.default.create(this, attributes, jwk);
    }
    /**
     * Do an ArQL request.
     * @deprecated Use https://npmjs.org/@textury/ardb instead.
     * @param  {object} query
     * @returns Promise
     */
    async arql(query) {
        const res = await this.api.post('/arql', query);
        return res.data || [];
    }
}
exports.default = Blockweave;
if (typeof window !== 'undefined') {
    window.Blockweave = Blockweave;
}
