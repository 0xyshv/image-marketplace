import { BlockHeightCacheResult, BlockHeightSwCache } from '../cache/index';
import { DefaultStateEvaluator, EvalStateResult, ExecutionContext, ExecutionContextModifier, HandlerApi } from '../core/index';
import Arweave from 'arweave';
import { GQLNodeInterface } from '../legacy/index';
import { CurrentTx } from '../contract/index';
/**
 * An implementation of DefaultStateEvaluator that adds caching capabilities
 */
export declare class CacheableStateEvaluator extends DefaultStateEvaluator {
    private readonly cache;
    private readonly cLogger;
    constructor(arweave: Arweave, cache: BlockHeightSwCache<EvalStateResult<unknown>>, executionContextModifiers?: ExecutionContextModifier[]);
    eval<State>(executionContext: ExecutionContext<State, HandlerApi<State>>, currentTx: CurrentTx[]): Promise<EvalStateResult<State>>;
    onStateEvaluated<State>(lastInteraction: GQLNodeInterface, executionContext: ExecutionContext<State>, state: EvalStateResult<State>): Promise<void>;
    onStateUpdate<State>(currentInteraction: GQLNodeInterface, executionContext: ExecutionContext<State>, state: EvalStateResult<State>): Promise<void>;
    latestAvailableState<State>(contractTxId: string, blockHeight: number): Promise<BlockHeightCacheResult<EvalStateResult<State>> | null>;
    onInternalWriteStateUpdate<State>(currentInteraction: GQLNodeInterface, contractTxId: string, state: EvalStateResult<State>): Promise<void>;
}
//# sourceMappingURL=CacheableStateEvaluator.d.ts.map